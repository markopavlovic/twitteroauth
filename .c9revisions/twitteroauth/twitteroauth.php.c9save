{"ts":1347312889031,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n/*\n * Abraham Williams (abraham@abrah.am) http://abrah.am\n *\n * The first PHP Library to support OAuth for Twitter's REST API.\n */\n\n/* Load OAuth lib. You can find it at http://oauth.net */\nrequire_once('OAuth.php');\n\n/**\n * Twitter OAuth class\n */\nclass TwitterOAuth {\n  /* Contains the last HTTP status code returned. */\n  public $http_code;\n  /* Contains the last API call. */\n  public $url;\n  /* Set up the API root URL. */\n  public $host = \"https://api.twitter.com/1/\";\n  /* Set timeout default. */\n  public $timeout = 30;\n  /* Set connect timeout. */\n  public $connecttimeout = 30; \n  /* Verify SSL Cert. */\n  public $ssl_verifypeer = FALSE;\n  /* Respons format. */\n  public $format = 'json';\n  /* Decode returned json data. */\n  public $decode_json = TRUE;\n  /* Contains the last HTTP headers returned. */\n  public $http_info;\n  /* Set the useragnet. */\n  public $useragent = 'TwitterOAuth v0.2.0-beta2';\n  /* Immediately retry the API call if the response was not successful. */\n  //public $retry = TRUE;\n\n\n\n\n  /**\n   * Set API URLS\n   */\n  function accessTokenURL()  { return 'https://api.twitter.com/oauth/access_token'; }\n  function authenticateURL() { return 'https://api.twitter.com/oauth/authenticate'; }\n  function authorizeURL()    { return 'https://api.twitter.com/oauth/authorize'; }\n  function requestTokenURL() { return 'https://api.twitter.com/oauth/request_token'; }\n\n  /**\n   * Debug helpers\n   */\n  function lastStatusCode() { return $this->http_status; }\n  function lastAPICall() { return $this->last_api_call; }\n\n  /**\n   * construct TwitterOAuth object\n   */\n  function __construct($consumer_key, $consumer_secret, $oauth_token = NULL, $oauth_token_secret = NULL) {\n    $this->sha1_method = new OAuthSignatureMethod_HMAC_SHA1();\n    $this->consumer = new OAuthConsumer($consumer_key, $consumer_secret);\n    if (!empty($oauth_token) && !empty($oauth_token_secret)) {\n      $this->token = new OAuthConsumer($oauth_token, $oauth_token_secret);\n    } else {\n      $this->token = NULL;\n    }\n  }\n\n\n  /**\n   * Get a request_token from Twitter\n   *\n   * @returns a key/value array containing oauth_token and oauth_token_secret\n   */\n  function getRequestToken($oauth_callback = NULL) {\n    $parameters = array();\n    if (!empty($oauth_callback)) {\n      $parameters['oauth_callback'] = $oauth_callback;\n    } \n    $request = $this->oAuthRequest($this->requestTokenURL(), 'GET', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n  /**\n   * Get the authorize URL\n   *\n   * @returns a string\n   */\n  function getAuthorizeURL($token, $sign_in_with_twitter = TRUE) {\n    if (is_array($token)) {\n      $token = $token['oauth_token'];\n    }\n    if (empty($sign_in_with_twitter)) {\n      return $this->authorizeURL() . \"?oauth_token={$token}\";\n    } else {\n       return $this->authenticateURL() . \"?oauth_token={$token}\";\n    }\n  }\n\n  /**\n   * Exchange request token and secret for an access token and\n   * secret, to sign API calls.\n   *\n   * @returns array(\"oauth_token\" => \"the-access-token\",\n   *                \"oauth_token_secret\" => \"the-access-secret\",\n   *                \"user_id\" => \"9436992\",\n   *                \"screen_name\" => \"abraham\")\n   */\n  function getAccessToken($oauth_verifier = FALSE) {\n    $parameters = array();\n    if (!empty($oauth_verifier)) {\n      $parameters['oauth_verifier'] = $oauth_verifier;\n    }\n    $request = $this->oAuthRequest($this->accessTokenURL(), 'GET', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n  /**\n   * One time exchange of username and password for access token and secret.\n   *\n   * @returns array(\"oauth_token\" => \"the-access-token\",\n   *                \"oauth_token_secret\" => \"the-access-secret\",\n   *                \"user_id\" => \"9436992\",\n   *                \"screen_name\" => \"abraham\",\n   *                \"x_auth_expires\" => \"0\")\n   */  \n  function getXAuthToken($username, $password) {\n    $parameters = array();\n    $parameters['x_auth_username'] = $username;\n    $parameters['x_auth_password'] = $password;\n    $parameters['x_auth_mode'] = 'client_auth';\n    $request = $this->oAuthRequest($this->accessTokenURL(), 'POST', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n  /**\n   * GET wrapper for oAuthRequest.\n   */\n  function get($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'GET', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n  \n  /**\n   * POST wrapper for oAuthRequest.\n   */\n  function post($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'POST', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n\n  /**\n   * DELETE wrapper for oAuthReqeust.\n   */\n  function delete($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'DELETE', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n\n  /**\n   * Format and sign an OAuth / API request\n   */\n  function oAuthRequest($url, $method, $parameters) {\n    if (strrpos($url, 'https://') !== 0 && strrpos($url, 'http://') !== 0) {\n      $url = \"{$this->host}{$url}.{$this->format}\";\n    }\n    $request = OAuthRequest::from_consumer_and_token($this->consumer, $this->token, $method, $url, $parameters);\n    $request->sign_request($this->sha1_method, $this->consumer, $this->token);\n    switch ($method) {\n    case 'GET':\n      return $this->http($request->to_url(), 'GET');\n    default:\n      return $this->http($request->get_normalized_http_url(), $method, $request->to_postdata());\n    }\n  }\n\n  /**\n   * Make an HTTP request\n   *\n   * @return API results\n   */\n  function http($url, $method, $postfields = NULL) {\n    $this->http_info = array();\n    $ci = curl_init();\n    /* Curl settings */\n    curl_setopt($ci, CURLOPT_USERAGENT, $this->useragent);\n    curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, $this->connecttimeout);\n    curl_setopt($ci, CURLOPT_TIMEOUT, $this->timeout);\n    curl_setopt($ci, CURLOPT_RETURNTRANSFER, TRUE);\n    curl_setopt($ci, CURLOPT_HTTPHEADER, array('Expect:'));\n    curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, $this->ssl_verifypeer);\n    curl_setopt($ci, CURLOPT_HEADERFUNCTION, array($this, 'getHeader'));\n    curl_setopt($ci, CURLOPT_HEADER, FALSE);\n\n    switch ($method) {\n      case 'POST':\n        curl_setopt($ci, CURLOPT_POST, TRUE);\n        if (!empty($postfields)) {\n          curl_setopt($ci, CURLOPT_POSTFIELDS, $postfields);\n        }\n        break;\n      case 'DELETE':\n        curl_setopt($ci, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        if (!empty($postfields)) {\n          $url = \"{$url}?{$postfields}\";\n        }\n    }\n\n    curl_setopt($ci, CURLOPT_URL, $url);\n    $response = curl_exec($ci);\n    $this->http_code = curl_getinfo($ci, CURLINFO_HTTP_CODE);\n    $this->http_info = array_merge($this->http_info, curl_getinfo($ci));\n    $this->url = $url;\n    curl_close ($ci);\n    return $response;\n  }\n\n  /**\n   * Get the header info to store.\n   */\n  function getHeader($ch, $header) {\n    $i = strpos($header, ':');\n    if (!empty($i)) {\n      $key = str_replace('-', '_', strtolower(substr($header, 0, $i)));\n      $value = trim(substr($header, $i + 2));\n      $this->http_header[$key] = $value;\n    }\n    return strlen($header);\n  }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7755}]],"length":7755}
{"contributors":[],"silentsave":false,"ts":1347313026952,"patch":[[{"diffs":[[0,"c $url;\n"],[1,"  /* Set the twitter API version for root URL */\n  public $version = \"1.1\";\n"],[0,"  /* Set"]],"start1":394,"start2":394,"length1":16,"length2":92},{"diffs":[[0,"ter.com/"],[-1,"1"],[1,"\".$this->version.\""],[0,"/\";\n  /*"]],"start1":545,"start2":545,"length1":17,"length2":34}]],"length":7848,"saved":false}
